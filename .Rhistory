help.start()
x<-rnorm(50)
y<-rnorm(x)
plot(x,y)
x<-rnorm(1000)
y<-rnorm(x)
plot(x,y)
ls()
rm(x,y)
x<-1:20
w<-1+sqrt(x)/2
dummy<-data.frame(x=x,y=x+rnorm(x)*w)
dummy
fm<=lm(y~x,data=dummy)
fm<-lm(y~x,data=dummy)
summary(fm)
fm1<-lm(y~x,data=dummy,weight=1/w^2)
summary(fm1)
attach(dummy)
lrf<-lowess(x,y)
plot(x,y)
lines(x,lrf$y)
abline(0,1,lty=3)
abline((coef(fm)))
abline(coef(fm1),col="red")
detach()
plot(fitted(fm),resid(fm),
xlab="fitted values",
ylab="residuals",
main="Residuals vs Fitted")
qqnorm(resid(fm),main="residuals rankit plot")
rm(fm,fm1,lrf,x,dummy)
filepath<-system.file("data","morley.tab",package="datasets")
filepath
file.show(filepath)
file.show(filepath)
mm<-read.table(filepath)
mm
mm$expt<-factor(mm$expt)
mm$Expt<-factor(mm$Expt)
mm$Run<-factor(mm$Run)
attach(mm)
plot(Expt,Speed,main="Speed of Light Data",xlab="Experiment No.")
fm<-aov(Speed~Run+Expt,data=mm)
summary(fm)
xm<-aov(Speed~Run+Expt,data=mm)
summary(xm)
fm0<-update(fm,.~. - Run)
anova(fm0,fm)
detach()
rm(fm,fm0)
x<-seq(-pi,pi,len=50)
x
plot(x)
plot(x,x)
plot(x,x,main="douche",xlab="samey",ylab="notsomuch")
y<-x
f<-outer(x,y,function(x,y)cos(y)/1+x^2))
f<-outer(x,y,function(x,y)cos(y)/(1+x^2))
oldpar<-par(no.readonly=TRUE)
par(pty="s")
contour(x,y,f)
contour(x,y,f,nlevels=15,add=TRUE)
fa<-(f-t(f))/2
contour(x,y,fa,nlevels=15)
par(oldpar)
image(x,y,f)
image(x,y,fa)
image(x,y,f)
image(x,y,f)
image(x,y,fa)
objects();rm(x,y,f,fa)
q()
library(datasets)
data(iris)
iris
tapply(iris$Sepal.Length,iris$Species,mean)
colmeans(iris)
colMeans(iris)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris,1,mean)
apply(iris,2,mean)
iris
apply(iris[,1:4],2,mean)
iris[,1:4]
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
with
split(mtcars,mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
debug(ls)
ls
ls()
nn
nn
nn
nn
n
n
n
n
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
function(c(1,2,3))
makeVector(c(1,2,3,4))
x = numeric()
x
print x
print(x)
print(x)
m <- NULL
print(m)
x <<- y
set <- function(y) {
print(Set)
x <<- y
print (X)
m <<- NULL
}
print (X)
print (x)
print(x)
m
get <- function() x
print(get)
print(setmean)
setmean <- function(mean) m <<- mean
print(setmean)
getmean <- function() m
print(getmean)
x <<- y
m <<- NULL
m
class(m)
solve()
solve
?sol
?solve
solve(help)
help(solve)
makeMatrix <-function(x=matrix(){
##WHAT DOES THIS DO?
m<-NULL
##setting f():
set <- function(y) {
x <<- y
m <<- NULL
}
##getting f()
get <- function() x
}
##x is the vector 'made'
makeVector <- function(x = matrix()) {
m <- NULL
##creates some 'set' function
##value of matrix = y
set <- function(y) {
x <<- y
m <<- NULL
}
##creates some 'get' fucntion
##returns the matrix x
get <- function() x
##function 'setting' the meanestabl
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
##a list gen:
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
##obtain the inverse from cache
m <- x$getinverse()
##if inverse is already identified, return from cache
if(!is.null(m)) {
message("getting cached data")
return(m)
}
##return the matrix x
data <- x$get()
##get the inverse
m <- solve(data, ...)
#setinverse
x$setinverse(m)
m
}
getwd()
cd..
cd/
setwd("c:/users/muttalib.Masum")
getwd()
setwd("programming")
setwd("ProgrammingAssignment2")
getwd()
